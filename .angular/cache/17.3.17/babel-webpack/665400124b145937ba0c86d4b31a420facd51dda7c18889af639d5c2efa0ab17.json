{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nconst _c0 = [\"introVideo\"];\nexport let VideoPageComponent = /*#__PURE__*/(() => {\n  class VideoPageComponent {\n    constructor(router) {\n      this.router = router;\n      this.videoUrl = 'https://website-juniorliu.s3.us-east-2.amazonaws.com/is-that-you.mp4';\n    }\n    ngAfterViewInit() {\n      // Try multiple times to play video after view is initialized\n      this.attemptVideoPlay();\n    }\n    attemptVideoPlay() {\n      const attempts = [100, 500, 1000, 2000];\n      attempts.forEach(delay => {\n        setTimeout(() => {\n          if (this.introVideo && this.introVideo.nativeElement) {\n            const video = this.introVideo.nativeElement;\n            // Ensure video is ready\n            if (video.readyState >= 3) {\n              video.play().catch(error => {\n                console.log(`Video play attempt failed after ${delay}ms:`, error);\n                // Add user interaction fallback\n                if (error.name === 'NotAllowedError') {\n                  this.addClickToPlayFallback();\n                }\n              });\n            }\n          }\n        }, delay);\n      });\n    }\n    addClickToPlayFallback() {\n      // Add a click overlay if autoplay fails\n      const container = document.querySelector('.video-page-container');\n      if (container && !container.querySelector('.click-to-play')) {\n        const overlay = document.createElement('div');\n        overlay.className = 'click-to-play';\n        overlay.style.cssText = `\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        background: rgba(0, 0, 0, 0.7);\n        color: white;\n        padding: 20px 40px;\n        border-radius: 10px;\n        cursor: pointer;\n        font-size: 18px;\n        z-index: 1000;\n      `;\n        overlay.textContent = 'Click to Play Video';\n        overlay.addEventListener('click', () => {\n          if (this.introVideo && this.introVideo.nativeElement) {\n            this.introVideo.nativeElement.play().catch(console.error);\n          }\n          overlay.remove();\n        });\n        container.appendChild(overlay);\n      }\n    }\n    onVideoLoaded() {\n      console.log('Video loaded and ready to play');\n      // Ensure video plays when loaded\n      if (this.introVideo && this.introVideo.nativeElement) {\n        this.introVideo.nativeElement.play().catch(error => {\n          console.error('Error playing video after load:', error);\n        });\n      }\n    }\n    onVideoCanPlay() {\n      console.log('Video can play');\n      // Force play when video is ready\n      if (this.introVideo && this.introVideo.nativeElement) {\n        this.introVideo.nativeElement.play().catch(error => {\n          console.error('Error playing video when ready:', error);\n        });\n      }\n    }\n    onVideoEnd() {\n      console.log('Video ended, navigating to index');\n      // Navigate to index page when video ends\n      this.router.navigate(['/index']);\n    }\n    onContainerClick() {\n      // Handle clicks on the container to help with autoplay restrictions\n      if (this.introVideo && this.introVideo.nativeElement) {\n        const video = this.introVideo.nativeElement;\n        if (video.paused) {\n          video.play().catch(error => {\n            console.log('Video play failed on container click:', error);\n          });\n        }\n      }\n    }\n    onVideoClick() {\n      // Handle direct clicks on the video\n      if (this.introVideo && this.introVideo.nativeElement) {\n        const video = this.introVideo.nativeElement;\n        if (video.paused) {\n          video.play().catch(error => {\n            console.log('Video play failed on video click:', error);\n          });\n        }\n      }\n    }\n    static {\n      this.ɵfac = function VideoPageComponent_Factory(t) {\n        return new (t || VideoPageComponent)(i0.ɵɵdirectiveInject(i1.Router));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: VideoPageComponent,\n        selectors: [[\"app-video-page\"]],\n        viewQuery: function VideoPageComponent_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.introVideo = _t.first);\n          }\n        },\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 4,\n        vars: 1,\n        consts: [[\"introVideo\", \"\"], [1, \"video-page-container\", 3, \"click\"], [\"autoplay\", \"\", \"muted\", \"\", \"playsinline\", \"\", 1, \"fullscreen-video\", 3, \"ended\", \"loadeddata\", \"canplay\", \"click\"], [\"type\", \"video/mp4\", 3, \"src\"]],\n        template: function VideoPageComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            const _r1 = i0.ɵɵgetCurrentView();\n            i0.ɵɵelementStart(0, \"div\", 1);\n            i0.ɵɵlistener(\"click\", function VideoPageComponent_Template_div_click_0_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.onContainerClick());\n            });\n            i0.ɵɵelementStart(1, \"video\", 2, 0);\n            i0.ɵɵlistener(\"ended\", function VideoPageComponent_Template_video_ended_1_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.onVideoEnd());\n            })(\"loadeddata\", function VideoPageComponent_Template_video_loadeddata_1_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.onVideoLoaded());\n            })(\"canplay\", function VideoPageComponent_Template_video_canplay_1_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.onVideoCanPlay());\n            })(\"click\", function VideoPageComponent_Template_video_click_1_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.onVideoClick());\n            });\n            i0.ɵɵelement(3, \"source\", 3);\n            i0.ɵɵelementEnd()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"src\", ctx.videoUrl, i0.ɵɵsanitizeUrl);\n          }\n        },\n        dependencies: [CommonModule],\n        styles: [\".video-page-container[_ngcontent-%COMP%]{position:fixed;top:0;left:0;width:100vw;height:100vh;background:#0c140c;display:flex;align-items:center;justify-content:center;overflow:hidden}.fullscreen-video[_ngcontent-%COMP%]{max-width:100vw;max-height:100vh;width:100%;height:100%;object-fit:contain}\"]\n      });\n    }\n  }\n  return VideoPageComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}